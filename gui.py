# -*- coding: utf-8 -*-
import re
import sys

# Form implementation generated from reading ui file '.\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtSerialPort
from PyQt5.QtWidgets import QMessageBox, QWidget, QApplication

DRIVER_ID = 0x01
MAIN_ID = 0x02
PEAK_ID = 0x03

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setFixedSize(858, 648)
        self.table_Main = QtWidgets.QTableWidget(Form)
        self.table_Main.setGeometry(QtCore.QRect(287, 90, 256, 192))
        self.table_Main.setObjectName("table_Main")
        self.table_Main.setColumnCount(3)
        self.table_Main.setRowCount(2)
        self.table_Main.setItem(0, 0, QtWidgets.QTableWidgetItem("-40"))
        self.table_Main.setItem(0, 1, QtWidgets.QTableWidgetItem("30"))
        self.table_Main.setItem(0, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Main.setItem(1, 0, QtWidgets.QTableWidgetItem("31"))
        self.table_Main.setItem(1, 1, QtWidgets.QTableWidgetItem("120"))
        self.table_Main.setItem(1, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Main.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        item = QtWidgets.QTableWidgetItem()
        self.table_Main.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Main.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Main.setHorizontalHeaderItem(2, item)

        self.table_Driver = QtWidgets.QTableWidget(Form)
        self.table_Driver.setGeometry(QtCore.QRect(24, 90, 256, 192))
        self.table_Driver.setFrameShape(QtWidgets.QFrame.Box)
        self.table_Driver.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.table_Driver.setLineWidth(1)
        self.table_Driver.setGridStyle(QtCore.Qt.CustomDashLine)
        self.table_Driver.setObjectName("table_Driver")
        self.table_Driver.setColumnCount(3)
        self.table_Driver.setRowCount(2)
        self.table_Driver.setItem(0, 0, QtWidgets.QTableWidgetItem("-40"))
        self.table_Driver.setItem(0, 1, QtWidgets.QTableWidgetItem("30"))
        self.table_Driver.setItem(0, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Driver.setItem(1, 0, QtWidgets.QTableWidgetItem("31"))
        self.table_Driver.setItem(1, 1, QtWidgets.QTableWidgetItem("120"))
        self.table_Driver.setItem(1, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Driver.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        item = QtWidgets.QTableWidgetItem()
        self.table_Driver.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Driver.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Driver.setHorizontalHeaderItem(2, item)

        self.table_Peak = QtWidgets.QTableWidget(Form)
        self.table_Peak.setGeometry(QtCore.QRect(550, 90, 256, 192))
        self.table_Peak.setObjectName("table_Peak")
        self.table_Peak.setColumnCount(3)
        self.table_Peak.setRowCount(2)
        self.table_Peak.setItem(0, 0, QtWidgets.QTableWidgetItem("-40"))
        self.table_Peak.setItem(0, 1, QtWidgets.QTableWidgetItem("30"))
        self.table_Peak.setItem(0, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Peak.setItem(1, 0, QtWidgets.QTableWidgetItem("31"))
        self.table_Peak.setItem(1, 1, QtWidgets.QTableWidgetItem("120"))
        self.table_Peak.setItem(1, 2, QtWidgets.QTableWidgetItem("-0.0012"))
        self.table_Peak.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        item = QtWidgets.QTableWidgetItem()
        self.table_Peak.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Peak.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_Peak.setHorizontalHeaderItem(2, item)

        self.pushButton_addDriver = QtWidgets.QPushButton(Form)
        self.pushButton_addDriver.setGeometry(QtCore.QRect(73, 289, 72, 23))
        self.pushButton_addDriver.setObjectName("pushButton_addDriver")

        self.pushButton_delDriver = QtWidgets.QPushButton(Form)
        self.pushButton_delDriver.setGeometry(QtCore.QRect(151, 289, 72, 23))
        self.pushButton_delDriver.setObjectName("pushButton_delDriver")

        self.pushButton_Tempcomp = QtWidgets.QPushButton(Form)
        self.pushButton_Tempcomp.setGeometry(QtCore.QRect(700, 320, 121, 28))
        self.pushButton_Tempcomp.setObjectName("pushButton_Tempcomp")

        self.label_Driver = QtWidgets.QLabel(Form)
        self.label_Driver.setGeometry(QtCore.QRect(114, 70, 104, 16))
        self.label_Driver.setObjectName("label_Driver")

        self.label_Main = QtWidgets.QLabel(Form)
        self.label_Main.setGeometry(QtCore.QRect(373, 69, 104, 16))
        self.label_Main.setObjectName("label_Main")

        self.label_Peak = QtWidgets.QLabel(Form)
        self.label_Peak.setGeometry(QtCore.QRect(633, 69, 104, 16))
        self.label_Peak.setObjectName("label_Peak")

        self.pushButton_Hex = QtWidgets.QPushButton(Form)
        self.pushButton_Hex.setGeometry(QtCore.QRect(20, 10, 90, 23))
        self.pushButton_Hex.setObjectName("pushButton_Hex")

        self.pushButton_JLink = QtWidgets.QPushButton(Form)
        self.pushButton_JLink.setGeometry(QtCore.QRect(763, 28, 90, 23))
        self.pushButton_JLink.setObjectName("pushButton_JLink")

        self.label_JLinkStatus = QtWidgets.QLabel(Form)
        self.label_JLinkStatus.setGeometry(QtCore.QRect(700, 20, 96, 39))
        self.label_JLinkStatus.setText("")
        self.label_JLinkStatus.setObjectName("label_JLinkStatus")

        self.label_FilePath = QtWidgets.QLabel(Form)
        self.label_FilePath.setGeometry(QtCore.QRect(110, 10, 1000, 21))
        self.label_FilePath.setObjectName("label_FilePath")

        self.pushButton_BurnHex = QtWidgets.QPushButton(Form)
        self.pushButton_BurnHex.setGeometry(QtCore.QRect(220, 40, 101, 28))
        self.pushButton_BurnHex.setObjectName("pushButton_BurnHex")

        self.pushButton_addMain = QtWidgets.QPushButton(Form)
        self.pushButton_addMain.setGeometry(QtCore.QRect(333, 289, 72, 23))
        self.pushButton_addMain.setObjectName("pushButton_addMain")

        self.pushButton_delMain = QtWidgets.QPushButton(Form)
        self.pushButton_delMain.setGeometry(QtCore.QRect(411, 289, 72, 23))
        self.pushButton_delMain.setObjectName("pushButton_delMain")

        self.pushButton_delPeak = QtWidgets.QPushButton(Form)
        self.pushButton_delPeak.setGeometry(QtCore.QRect(671, 289, 72, 23))
        self.pushButton_delPeak.setObjectName("pushButton_delPeak")

        self.pushButton_addPeak = QtWidgets.QPushButton(Form)
        self.pushButton_addPeak.setGeometry(QtCore.QRect(593, 289, 72, 23))
        self.pushButton_addPeak.setObjectName("pushButton_addPeak")

        self.label_Driver_Direct = QtWidgets.QLabel(Form)
        self.label_Driver_Direct.setGeometry(QtCore.QRect(30, 400, 90, 31))
        self.label_Driver_Direct.setObjectName("label_Driver_Direct")

        self.lineEdit_Driver = QtWidgets.QLineEdit(Form)
        self.lineEdit_Driver.setGeometry(QtCore.QRect(120, 400, 81, 31))
        self.lineEdit_Driver.setObjectName("lineEdit_Driver")
        self.lineEdit_Driver.setPlaceholderText("0~3V")
        self.lineEdit_Driver.editingFinished.connect(lambda: self.check_input_range(self.lineEdit_Driver))

        self.pushButton_SetDriver = QtWidgets.QPushButton(Form)
        self.pushButton_SetDriver.setGeometry(QtCore.QRect(220, 400, 71, 31))
        self.pushButton_SetDriver.setObjectName("pushButton_SetDriver")

        self.label_DirectLable = QtWidgets.QLabel(Form)
        self.label_DirectLable.setGeometry(QtCore.QRect(30, 370, 101, 41))
        self.label_DirectLable.setObjectName("label_DirectLable")

        self.pushButton_ModeToggle = QtWidgets.QPushButton(Form)
        self.pushButton_ModeToggle.setGeometry(QtCore.QRect(320, 340, 141, 31))
        self.pushButton_ModeToggle.setObjectName("pushButton_ModeToggle")
        self.pushButton_ModeToggle.setEnabled(False)

        self.pushButton_SetMain = QtWidgets.QPushButton(Form)
        self.pushButton_SetMain.setGeometry(QtCore.QRect(220, 440, 71, 31))
        self.pushButton_SetMain.setObjectName("pushButton_SetMain")

        self.pushButton_SetPeak = QtWidgets.QPushButton(Form)
        self.pushButton_SetPeak.setGeometry(QtCore.QRect(220, 480, 71, 31))
        self.pushButton_SetPeak.setObjectName("pushButton_SetPeak")

        self.label_ModeStatus = QtWidgets.QLabel(Form)
        self.label_ModeStatus.setGeometry(QtCore.QRect(470, 340, 141, 31))
        self.label_ModeStatus.setObjectName("label_ModeStatus")
        self.label_ModeStatus.setText("直设栅压模式")




        self.lineEdit_Main = QtWidgets.QLineEdit(Form)
        self.lineEdit_Main.setGeometry(QtCore.QRect(120, 440, 81, 31))
        self.lineEdit_Main.setObjectName("lineEdit_Main")
        self.lineEdit_Main.setPlaceholderText("0~3V")
        self.lineEdit_Main.editingFinished.connect(lambda: self.check_input_range(self.lineEdit_Main))

        self.label_Main_Direct = QtWidgets.QLabel(Form)
        self.label_Main_Direct.setGeometry(QtCore.QRect(30, 440, 71, 31))
        self.label_Main_Direct.setObjectName("label_Main_Direct")



        self.lineEdit_Peak = QtWidgets.QLineEdit(Form)
        self.lineEdit_Peak.setGeometry(QtCore.QRect(120, 480, 81, 31))
        self.lineEdit_Peak.setObjectName("lineEdit_Peak")
        self.lineEdit_Peak.setPlaceholderText("0~3V")
        self.lineEdit_Peak.editingFinished.connect(lambda: self.check_input_range(self.lineEdit_Peak))

        self.label_Peak_Direct = QtWidgets.QLabel(Form)
        self.label_Peak_Direct.setGeometry(QtCore.QRect(30, 480, 71, 31))
        self.label_Peak_Direct.setObjectName("label_Peak_Direct")

        self.lcdNumber_Temp = QtWidgets.QLCDNumber(Form)
        self.lcdNumber_Temp.setGeometry(QtCore.QRect(320, 380, 141, 61))
        self.lcdNumber_Temp.setObjectName("lcdNumber_Temp")

        self.label_Temperature = QtWidgets.QLabel(Form)
        self.label_Temperature.setGeometry(QtCore.QRect(480, 400, 111, 31))
        self.label_Temperature.setObjectName("label_Temperature")

        self.pushButton_SetDSA = QtWidgets.QPushButton(Form)
        self.pushButton_SetDSA.setGeometry(QtCore.QRect(480, 450, 71, 31))
        self.pushButton_SetDSA.setObjectName("pushButton_SetDSA")

        self.label_DSA = QtWidgets.QLabel(Form)
        self.label_DSA.setGeometry(QtCore.QRect(320, 450, 71, 31))
        self.label_DSA.setObjectName("label_DSA")

        self.lineEdit_DSA = QtWidgets.QLineEdit(Form)
        self.lineEdit_DSA.setGeometry(QtCore.QRect(390, 450, 81, 31))
        self.lineEdit_DSA.setObjectName("lineEdit_DSA")
        self.lineEdit_DSA.setPlaceholderText("0~31.5")

        self.lineEdit_TorStatus = QtWidgets.QLineEdit(Form)
        self.lineEdit_TorStatus.setGeometry(QtCore.QRect(390, 490, 81, 31))
        self.lineEdit_TorStatus.setObjectName("lineEdit_TorStatus")
        self.lineEdit_TorStatus.setReadOnly(True)

        self.label_Tor = QtWidgets.QLabel(Form)
        self.label_Tor.setGeometry(QtCore.QRect(310, 490, 71, 31))
        self.label_Tor.setObjectName("label_Tor")

        self.pushButton_Torset = QtWidgets.QPushButton(Form)
        self.pushButton_Torset.setGeometry(QtCore.QRect(480, 490, 71, 31))
        self.pushButton_Torset.setObjectName("pushButton_Torset")

        self.listView_Direct = QtWidgets.QListView(Form)
        self.listView_Direct.setGeometry(QtCore.QRect(20, 370, 281, 161))
        self.listView_Direct.setObjectName("listView_Direct")

        self.listView_Direct_2 = QtWidgets.QListView(Form)
        self.listView_Direct_2.setGeometry(QtCore.QRect(560, 370, 281, 191))
        self.listView_Direct_2.setObjectName("listView_Direct_2")

        self.label_TempCompInit = QtWidgets.QLabel(Form)
        self.label_TempCompInit.setGeometry(QtCore.QRect(570, 370, 121, 41))
        self.label_TempCompInit.setObjectName("label_TempCompInit")

        self.pushButton_MainInit = QtWidgets.QPushButton(Form)
        self.pushButton_MainInit.setGeometry(QtCore.QRect(760, 480, 71, 31))
        self.pushButton_MainInit.setObjectName("pushButton_MainInit")

        self.pushButton_SetTempInit = QtWidgets.QPushButton(Form)
        self.pushButton_SetTempInit.setGeometry(QtCore.QRect(760, 400, 71, 31))
        self.pushButton_SetTempInit.setObjectName("pushButton_SetTempInit")


        self.lineEdit_DriverInit = QtWidgets.QLineEdit(Form)
        self.lineEdit_DriverInit.setGeometry(QtCore.QRect(660, 440, 81, 31))
        self.lineEdit_DriverInit.setObjectName("lineEdit_DriverInit")
        self.lineEdit_DriverInit.setPlaceholderText("2.3V")

        self.lineEdit_TempInit = QtWidgets.QLineEdit(Form)
        self.lineEdit_TempInit.setGeometry(QtCore.QRect(660, 400, 81, 31))
        self.lineEdit_TempInit.setObjectName("lineEdit_TempInit")
        self.lineEdit_TempInit.setPlaceholderText("25°C")

        self.pushButton_DriverInit = QtWidgets.QPushButton(Form)
        self.pushButton_DriverInit.setGeometry(QtCore.QRect(760, 440, 71, 31))
        self.pushButton_DriverInit.setObjectName("pushButton_DriverInit")

        self.label_TempInit = QtWidgets.QLabel(Form)
        self.label_TempInit.setGeometry(QtCore.QRect(570, 400, 71, 31))
        self.label_TempInit.setObjectName("label_TempInit")

        self.label_MainInit = QtWidgets.QLabel(Form)
        self.label_MainInit.setGeometry(QtCore.QRect(570, 480, 71, 31))
        self.label_MainInit.setObjectName("label_MainInit")

        self.label_DriverInit = QtWidgets.QLabel(Form)
        self.label_DriverInit.setGeometry(QtCore.QRect(570, 440, 81, 31))
        self.label_DriverInit.setObjectName("label_DriverInit")

        self.lineEdit_MainInit = QtWidgets.QLineEdit(Form)
        self.lineEdit_MainInit.setGeometry(QtCore.QRect(660, 480, 81, 31))
        self.lineEdit_MainInit.setObjectName("lineEdit_MainInit")
        self.lineEdit_MainInit.setPlaceholderText("2.3V")

        self.pushButton_PeakInit = QtWidgets.QPushButton(Form)
        self.pushButton_PeakInit.setGeometry(QtCore.QRect(760, 520, 71, 31))
        self.pushButton_PeakInit.setObjectName("pushButton_PeakInit")


        self.lineEdit_PeakInit = QtWidgets.QLineEdit(Form)
        self.lineEdit_PeakInit.setGeometry(QtCore.QRect(660, 520, 81, 31))
        self.lineEdit_PeakInit.setObjectName("lineEdit_PeakInit")
        self.lineEdit_PeakInit.setPlaceholderText("1.5V")

        self.label_PeakInit = QtWidgets.QLabel(Form)
        self.label_PeakInit.setGeometry(QtCore.QRect(570, 520, 71, 31))
        self.label_PeakInit.setObjectName("label_PeakInit")

        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(440, 30, 121, 31))
        self.comboBox.setObjectName("comboBox")

        self.pushButton_Serial = QtWidgets.QPushButton(Form)
        self.pushButton_Serial.setGeometry(QtCore.QRect(570, 30, 93, 28))
        self.pushButton_Serial.setObjectName("pushButton_Serial")

        self.label_VgsStatus = QtWidgets.QLabel(Form)
        self.label_VgsStatus.setGeometry(QtCore.QRect(370, 530, 91, 31))
        self.label_VgsStatus.setObjectName("label_VgsStatus")

        self.line_DriverCurrent = QtWidgets.QLineEdit(Form)
        self.line_DriverCurrent.setGeometry(QtCore.QRect(250, 570, 91, 31))
        self.line_DriverCurrent.setObjectName("line_DriverCurrent")
        self.line_DriverCurrent.setPlaceholderText("2.0V")
        self.line_DriverCurrent.setReadOnly(True)

        self.line_MainCurrent = QtWidgets.QLineEdit(Form)
        self.line_MainCurrent.setGeometry(QtCore.QRect(360, 570, 91, 31))
        self.line_MainCurrent.setObjectName("line_MainCurrent")
        self.line_MainCurrent.setPlaceholderText("2.0V")
        self.line_MainCurrent.setReadOnly(True)

        self.line_PeakCurrent = QtWidgets.QLineEdit(Form)
        self.line_PeakCurrent.setGeometry(QtCore.QRect(470, 570, 91, 31))
        self.line_PeakCurrent.setObjectName("line_PeakCurrent")
        self.line_PeakCurrent.setPlaceholderText("1.0V")
        self.line_PeakCurrent.setReadOnly(True)

        self.label_DriverCurrentStatus = QtWidgets.QLabel(Form)
        self.label_DriverCurrentStatus.setGeometry(QtCore.QRect(260, 610, 95, 21))
        self.label_DriverCurrentStatus.setObjectName("label_DriverCurrentStatus")

        self.label_MainCuurentStatus = QtWidgets.QLabel(Form)
        self.label_MainCuurentStatus.setGeometry(QtCore.QRect(370, 610, 81, 21))
        self.label_MainCuurentStatus.setObjectName("label_MainCuurentStatus")

        self.label_PeakCurrentStatus = QtWidgets.QLabel(Form)
        self.label_PeakCurrentStatus.setGeometry(QtCore.QRect(480, 610, 81, 21))
        self.label_PeakCurrentStatus.setObjectName("label_PeakCurrentStatus")

        self.update_button_status()

        self.listView_Direct.raise_()
        self.table_Main.raise_()
        self.table_Driver.raise_()
        self.pushButton_addDriver.raise_()
        self.pushButton_delDriver.raise_()
        self.pushButton_Tempcomp.raise_()
        self.label_Driver.raise_()
        self.label_Main.raise_()
        self.label_Peak.raise_()
        self.pushButton_Hex.raise_()
        self.pushButton_JLink.raise_()
        self.label_JLinkStatus.raise_()
        self.label_FilePath.raise_()
        self.pushButton_BurnHex.raise_()
        self.pushButton_addMain.raise_()
        self.pushButton_delMain.raise_()
        self.pushButton_delPeak.raise_()
        self.pushButton_addPeak.raise_()
        self.table_Peak.raise_()
        self.label_Driver_Direct.raise_()
        self.lineEdit_Driver.raise_()
        self.pushButton_SetDriver.raise_()
        self.label_DirectLable.raise_()
        self.pushButton_ModeToggle.raise_()
        self.label_ModeStatus.raise_()
        self.pushButton_SetMain.raise_()
        self.lineEdit_Main.raise_()
        self.label_Main_Direct.raise_()
        self.pushButton_SetPeak.raise_()
        self.lineEdit_Peak.raise_()
        self.label_Peak_Direct.raise_()
        self.lcdNumber_Temp.raise_()
        self.label_Temperature.raise_()
        self.pushButton_SetDSA.raise_()
        self.label_DSA.raise_()
        self.lineEdit_DSA.raise_()
        self.lineEdit_TorStatus.raise_()
        self.label_Tor.raise_()
        self.pushButton_Torset.raise_()
        self.listView_Direct_2.raise_()
        self.label_TempCompInit.raise_()
        self.pushButton_MainInit.raise_()
        self.pushButton_SetTempInit.raise_()
        self.lineEdit_DriverInit.raise_()
        self.lineEdit_TempInit.raise_()
        self.pushButton_DriverInit.raise_()
        self.label_TempInit.raise_()
        self.label_MainInit.raise_()
        self.label_DriverInit.raise_()
        self.lineEdit_MainInit.raise_()
        self.pushButton_PeakInit.raise_()
        self.lineEdit_PeakInit.raise_()
        self.label_PeakInit.raise_()
        self.comboBox.raise_()
        self.pushButton_Serial.raise_()
        self.label_VgsStatus.raise_()
        self.line_DriverCurrent.raise_()
        self.line_MainCurrent.raise_()
        self.line_PeakCurrent.raise_()
        self.label_DriverCurrentStatus.raise_()
        self.label_MainCuurentStatus.raise_()
        self.label_PeakCurrentStatus.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton_addDriver.clicked.connect(lambda: self.add_row(self.table_Driver))
        self.pushButton_addMain.clicked.connect(lambda: self.add_row(self.table_Main))
        self.pushButton_addPeak.clicked.connect(lambda: self.add_row(self.table_Peak))

        self.pushButton_delDriver.clicked.connect(lambda: self.delete_row(self.table_Driver))
        self.pushButton_delMain.clicked.connect(lambda: self.delete_row(self.table_Main))
        self.pushButton_delPeak.clicked.connect(lambda: self.delete_row(self.table_Peak))

        self.pushButton_Hex.clicked.connect(self.select_hex_file)

        self.pushButton_BurnHex.clicked.connect(lambda: self.burn_hex_file(self.label_FilePath.text()))

        self.pushButton_JLink.clicked.connect(self.check_jlink_connection)

        self.pushButton_Tempcomp.clicked.connect(self.burn_temperature_compensation)

        # COM connect
        self.refresh_ports()
        self.pushButton_Serial.clicked.connect(self.connect_serial)

        self.pushButton_ModeToggle.clicked.connect(self.send_temp_comp)

        self.pushButton_SetDriver.clicked.connect(lambda: self.send_value("Driver", self.lineEdit_Driver))
        self.pushButton_SetMain.clicked.connect(lambda: self.send_value("Main", self.lineEdit_Main))
        self.pushButton_SetPeak.clicked.connect(lambda: self.send_value("Peak", self.lineEdit_Peak))

        self.pushButton_SetTempInit.clicked.connect(self.send_tempInit_to_serial)
        self.pushButton_DriverInit.clicked.connect(self.send_driverInit_to_serial)
        self.pushButton_MainInit.clicked.connect(self.send_mainInit_to_serial)
        self.pushButton_PeakInit.clicked.connect(self.send_peakInit_to_serial)

        self.pushButton_SetDSA.clicked.connect(self.send_DSA_to_serial)

        self.pushButton_Torset.clicked.connect(self.send_Tor_to_serial)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "功率放大器温度补偿调试工具"))
        item = self.table_Main.horizontalHeaderItem(0)
        item.setText(_translate("Form", "温度上限"))
        item = self.table_Main.horizontalHeaderItem(1)
        item.setText(_translate("Form", "温度下限"))
        item = self.table_Main.horizontalHeaderItem(2)
        item.setText(_translate("Form", "补偿系数"))
        item = self.table_Driver.horizontalHeaderItem(0)
        item.setText(_translate("Form", "温度上限"))
        item = self.table_Driver.horizontalHeaderItem(1)
        item.setText(_translate("Form", "温度下限"))
        item = self.table_Driver.horizontalHeaderItem(2)
        item.setText(_translate("Form", "补偿系数"))
        self.pushButton_addDriver.setText(_translate("Form", "添加区间"))
        self.pushButton_delDriver.setText(_translate("Form", "删除区间"))
        self.pushButton_Tempcomp.setText(_translate("Form", "烧录温度补偿表"))
        self.label_Driver.setText(_translate("Form", "驱放温度补偿表"))
        self.label_Main.setText(_translate("Form", "主路温度补偿表"))
        self.label_Peak.setText(_translate("Form", "峰值温度补偿表"))
        self.pushButton_Hex.setText(_translate("Form", "选择HEX文件"))
        self.pushButton_JLink.setText(_translate("Form", "连接J-Link"))
        self.label_FilePath.setText(_translate("Form", "文件路径："))
        self.pushButton_BurnHex.setText(_translate("Form", "烧录HEX文件"))
        self.pushButton_addMain.setText(_translate("Form", "添加区间"))
        self.pushButton_delMain.setText(_translate("Form", "删除区间"))
        self.pushButton_delPeak.setText(_translate("Form", "删除区间"))
        self.pushButton_addPeak.setText(_translate("Form", "添加区间"))
        item = self.table_Peak.horizontalHeaderItem(0)
        item.setText(_translate("Form", "温度上限"))
        item = self.table_Peak.horizontalHeaderItem(1)
        item.setText(_translate("Form", "温度下限"))
        item = self.table_Peak.horizontalHeaderItem(2)
        item.setText(_translate("Form", "补偿系数"))
        self.label_Driver_Direct.setText(_translate("Form", "Driver栅压"))
        self.pushButton_SetDriver.setText(_translate("Form", "设置栅压"))
        self.label_DirectLable.setText(_translate("Form", "直接设置栅压"))
        self.pushButton_ModeToggle.setText(_translate("Form", "直设/温补模式切换"))
        # self.label_ModeStatus.setText(_translate("Form", ""))
        self.pushButton_SetMain.setText(_translate("Form", "设置栅压"))
        self.label_Main_Direct.setText(_translate("Form", "Main栅压"))
        self.pushButton_SetPeak.setText(_translate("Form", "设置栅压"))
        self.label_Peak_Direct.setText(_translate("Form", "Peak栅压"))
        self.label_Temperature.setText(_translate("Form", "当前温度"))
        self.pushButton_SetDSA.setText(_translate("Form", "设置增益"))
        self.label_DSA.setText(_translate("Form", "DSA增益"))
        self.lineEdit_TorStatus.setText(_translate("Form", "前向"))
        self.label_Tor.setText(_translate("Form", "前/反向"))
        self.pushButton_Torset.setText(_translate("Form", "切换"))
        self.label_TempCompInit.setText(_translate("Form", "温补模式初始值"))
        self.pushButton_MainInit.setText(_translate("Form", "设置初值"))
        self.pushButton_SetTempInit.setText(_translate("Form", "设置温度"))
        self.pushButton_DriverInit.setText(_translate("Form", "设置初值"))
        self.label_TempInit.setText(_translate("Form", "温度基准3"))
        self.label_MainInit.setText(_translate("Form", "Main基准"))
        self.label_DriverInit.setText(_translate("Form", "Driver基准"))
        self.pushButton_PeakInit.setText(_translate("Form", "设置初值"))
        self.label_PeakInit.setText(_translate("Form", "Peak基准"))
        self.pushButton_Serial.setText(_translate("Form", "连接串口"))
        self.label_VgsStatus.setText(_translate("Form", "当前栅压值"))
        self.label_DriverCurrentStatus.setText(_translate("Form", "Driver栅压值"))
        self.label_MainCuurentStatus.setText(_translate("Form", "Main栅压值"))
        self.label_PeakCurrentStatus.setText(_translate("Form", "Peak栅压值"))

    def add_row(self, table):
        row_position = table.rowCount()
        table.insertRow(row_position)
        for column in range(table.columnCount()):
            item = QtWidgets.QTableWidgetItem()
            table.setItem(row_position, column, item)
        table.viewport().update()

    def delete_row(self, table):
        current_row = table.currentRow()
        if current_row != -1:
            table.removeRow(current_row)

    def select_hex_file(self):
        options = QtWidgets.QFileDialog.Options()
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(None, "选择HEX文件", "",
                                                             "HEX Files (*.hex);;All Files (*)", options=options)
        if file_name:
            self.label_FilePath.setText(file_name)

    def burn_hex_file(self, hex_file_path):
        if self.label_JLinkStatus.text() != "已连接":
            QtWidgets.QMessageBox.warning(None, "警告", "请先连接J-Link！")
            return

        if not hex_file_path or hex_file_path == "文件路径：":
            QtWidgets.QMessageBox.warning(None, "警告", "请先选择HEX文件！")
            return

        import pylink
        import intelhex
        try:
            # 创建 J-Link 对象
            jlink = pylink.JLink()

            # 打开 J-Link 连接
            jlink.open()

            # 设置调试接口为 SWD（如果设备使用 SWD）
            jlink.set_tif(pylink.enums.JLinkInterfaces.SWD)

            # 降低通信速度为 1000 kHz
            jlink.set_speed(4800)

            # 连接到目标设备，指定 STM32F030C8
            jlink.connect('STM32F030C8')

            # 擦除 Flash
            start_erase_address = 0x08000000
            end_erase_address = 0x0800F000
            page_size = 1024  # STM32F030C8 的页大小是 1KB
            for address in range(start_erase_address, end_erase_address, page_size):
                data = [0xFF] * page_size
                jlink.memory_write(address, data)

            # 打开并读取 hex 文件
            hex_file = intelhex.IntelHex(hex_file_path)
            start_addr, end_addr = hex_file.minaddr(), hex_file.maxaddr()

            # 遍历文件中的地址并写入到目标设备的 Flash
            for address in range(start_addr, end_addr, 256):  # 分块写入（256字节为一块）
                data = hex_file.tobinarray(start=address, size=256)
                jlink.memory_write(address, data)

            # 读取并验证写入的数据
            verify = jlink.memory_read(start_addr, end_addr - start_addr)
            data_to_verify = hex_file.tobinarray(start=start_addr, size=end_addr - start_addr)

            if list(verify) == list(data_to_verify):
                QtWidgets.QMessageBox.information(None, "成功", "验证成功：数据正确写入 Flash！")
            else:
                QtWidgets.QMessageBox.critical(None, "烧录失败", "验证失败：写入的数据与读回的数据不匹配！")

            # 复位设备
            jlink.reset()

            # 断开连接
            jlink.close()

        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "烧录失败", f"烧录过程中发生错误: {e}")

    def check_jlink_connection(self):
        import pylink
        try:
            jlink = pylink.JLink()
            jlink.open()
            jlink.close()
            self.label_JLinkStatus.setText("已连接")
        except Exception as e:
            self.label_JLinkStatus.setText("未连接")

    def extract_compensation_data(self):
        compensation_data = []

        def extract_from_table(table, param_type):
            for row in range(table.rowCount()):
                temp_low = int(table.item(row, 0).text())
                temp_high = int(table.item(row, 1).text())
                coeff = float(table.item(row, 2).text())
                compensation_data.append({
                    'param_type': param_type,
                    'temp_low': temp_low,
                    'temp_high': temp_high,
                    'coeff': coeff
                })

        # 提取各个表格的数据
        extract_from_table(self.table_Driver, DRIVER_ID)
        extract_from_table(self.table_Main, MAIN_ID)
        extract_from_table(self.table_Peak, PEAK_ID)

        return compensation_data

    def burn_temperature_compensation(self):
        if self.label_JLinkStatus.text() != "已连接":
            QtWidgets.QMessageBox.warning(None, "警告", "请先连接J-Link！")
            return

        compensation_data = self.extract_compensation_data()

        import pylink
        import struct
        try:
            jLink = pylink.JLink()
            jLink.open()
            jLink.set_tif(pylink.enums.JLinkInterfaces.SWD)
            jLink.set_speed(4800)
            jLink.connect('STM32F030C8')
            jLink.reset()
            print("设备信息：", jLink.core_id())

            page_size = 1024  # 1KB
            start_address = 0x800F000
            end_address = 0x8010000

            # 擦除 Flash 模拟
            for addr in range(start_address, end_address, page_size):
                data = [0xFF] * page_size
                jLink.memory_write(addr, data)

            # 打包数据
            packed_data = b''
            for entry in compensation_data:
                packed_data += struct.pack(
                    'Bii',  # 1 Byte param_type, 4 Bytes temp_low, 4 Bytes temp_high
                    entry['param_type'],  # param_type
                    entry['temp_low'],  # temp_low
                    entry['temp_high']  # temp_high
                ) + struct.pack('f', entry['coeff'])  # coefficient

            # 烧录数据
            flash_start_address = 0x800F000
            jLink.memory_write(flash_start_address, packed_data)

            # 验证数据
            data_read_back = jLink.memory_read(flash_start_address, len(packed_data))
            if list(data_read_back) == list(packed_data):
                QtWidgets.QMessageBox.information(None, "成功", "烧录成功！")
            else:
                QtWidgets.QMessageBox.critical(None, "烧录失败", "验证失败：写入数据与读回数据不一致！")

        except Exception as e:
            QtWidgets.QMessageBox.critical(None, "烧录失败", f"烧录过程中发生错误: {e}")

    def update_button_status(self):
        """
        检查 label_ModeStatus 的文本内容，并根据内容启用或禁用按钮
        """
        if self.label_ModeStatus.text() == "直设栅压模式":
            self.pushButton_SetDriver.setEnabled(True)  # 启用按钮
            self.pushButton_SetMain.setEnabled(True)
            self.pushButton_SetPeak.setEnabled(True)
            self.pushButton_SetTempInit.setEnabled(False)
            self.pushButton_DriverInit.setEnabled(False)
            self.pushButton_MainInit.setEnabled(False)
            self.pushButton_PeakInit.setEnabled(False)
        else:
            self.pushButton_SetDriver.setEnabled(False)  # 禁用按钮
            self.pushButton_SetMain.setEnabled(False)
            self.pushButton_SetPeak.setEnabled(False)
            self.pushButton_SetTempInit.setEnabled(True)
            self.pushButton_DriverInit.setEnabled(True)
            self.pushButton_MainInit.setEnabled(True)
            self.pushButton_PeakInit.setEnabled(True)

    def check_input_range(self, line_edit):
        """
        检查输入是否在0~3V范围内
        :param line_edit: 要检查的 QLineEdit 对象
        """
        try:
            value = float(line_edit.text())
        except ValueError:
            # 输入不是数字时弹窗提示
            QMessageBox.warning(self, "输入错误", "请输入有效的数字")
            line_edit.clear()
            return

        # 检查输入是否在 0 到 3 范围内
        if value < 0 or value > 3:
            QMessageBox.warning(self, "输入错误", "请输入 0~3 范围内的数值")
            line_edit.clear()

    def send_value(self, name, line_edit):
        """
        从对应的 QLineEdit 读取数值并发送
        :param name: 按钮名称 (Driver, Main, Peak)
        :param line_edit: 对应的 QLineEdit 对象
        """
        # 定义通道名称映射
        channel_mapping = {
            "Driver": ("CH1", self.line_DriverCurrent),
            "Main": ("CH2", self.line_MainCurrent),
            "Peak": ("CH3", self.line_PeakCurrent)
        }

        try:
            value = float(line_edit.text())
            if 0 <= value <= 3:
                # 根据名称获取对应的通道编号
                channel, current_line_edit = channel_mapping.get(name, ("CH1", self.line_DriverCurrent))
                # 格式化命令字符串
                command = f"SET {channel} {value:.2f}\r\n"
                print("发送命令:", command)  # 调试信息
                current_line_edit.setText(f"{value:.2f}")

                # 将命令发送到串口
                if hasattr(self, 'serial') and self.serial.isOpen():
                    self.serial.write(command.encode())  # 发送命令到串口
                else:
                    QMessageBox.critical(self, "串口未连接", "请先连接到串口")
            else:
                QMessageBox.warning(self, "输入错误", "请输入 0~3 范围内的数值")
        except ValueError:
            QMessageBox.warning(self, "输入错误", "请输入有效的数字")

    def refresh_ports(self):
        # 获取所有可用的串口信息
        ports = QtSerialPort.QSerialPortInfo.availablePorts()
        self.comboBox.clear()  # 清除现有内容
        for port in ports:
            self.comboBox.addItem(port.portName())  # 将串口名添加到下拉菜单

    def connect_serial(self):
        # 获取用户选择的串口
        selected_port = self.comboBox.currentText()

        if not selected_port:
            QMessageBox.warning(self, "错误", "请选择一个有效的串口")
            return

        # 创建 QSerialPort 实例并设置选中的串口
        self.serial = QtSerialPort.QSerialPort()
        self.serial.setPortName(selected_port)
        self.serial.setBaudRate(QtSerialPort.QSerialPort.Baud115200)

        # 设置串口读取回调
        self.serial.readyRead.connect(self.read_from_serial)

        # 尝试打开串口
        if self.serial.open(QtCore.QIODevice.ReadWrite):
            QMessageBox.information(self, "成功", f"连接串口 {selected_port} 成功")
            self.pushButton_ModeToggle.setEnabled(True)  # 连接成功后启用 Mode Toggle 按钮
        else:
            QMessageBox.critical(self, "错误", f"无法连接串口 {selected_port}")

    def send_temp_comp(self):
        # 向串口发送字符串 "TEMP_COMP\r\n"
        if hasattr(self, 'serial') and self.serial.isOpen():
            command = "TEMP_COMP\r\n"
            self.serial.write(command.encode())
            # QMessageBox.information(self, "成功", "发送命令: TEMP_COMP")
        else:
            QMessageBox.critical(self, "错误", "串口未打开")

    # def send_temp_to_serial(self):
    #     try:
    #         # 获取lineEdit_TempInit中的浮点数
    #         temp_value = float(self.lineEdit_TempInit.text())
    #         # 创建发送字符串
    #         command = f"SET T0 {temp_value}"
    #         # 发送字符串到串口（假设已经打开串口，serial_port为串口对象）
    #         self.serial.write(command.encode())
    #         print(f"Sent command: {command}")
    #     except ValueError:
    #         # 若转换失败，显示错误提示
    #         QtWidgets.QMessageBox.warning(self, "Input Error", "请输入有效的浮点数")

    def send_tempInit_to_serial(self):
        # 检查串口是否打开
        if hasattr(self, 'serial') and self.serial.isOpen():
            try:
                # 尝试将输入转换为浮点数
                temp_value = float(self.lineEdit_TempInit.text())
                command = f"SET T0 {temp_value}\r\n"

                # 发送命令到串口
                self.serial.write(command.encode())
                print(f"Sent command: {command}")

            except ValueError:
                # 若输入不是有效的浮点数，弹出错误提示
                QMessageBox.warning(self, "输入错误", "请输入有效的浮点数")
        else:
            # 如果串口未打开，弹出错误提示
            QMessageBox.critical(self, "错误", "串口未打开")

    def send_driverInit_to_serial(self):
        if hasattr(self, 'serial') and self.serial.isOpen():
            try:
                driver_init = float(self.lineEdit_DriverInit.text())
                command = f"SET DRIVE_T0 {driver_init}\r\n"

                self.serial.write(command.encode())
                print(f"Send command: {command}")

            except ValueError:
                QMessageBox.warning(self, "输入错误", "请输入有效初始值")
        else:
            QMessageBox.critical(self, "错误", "串口未打开")

    def send_mainInit_to_serial(self):
        if hasattr(self, 'serial') and self.serial.isOpen():
            try:
                main_init = float(self.lineEdit_MainInit.text())
                command = f"SET MAIN_T0 {main_init}\r\n"

                self.serial.write(command.encode())
                print(f"Send command: {command}")
            except ValueError:
                QMessageBox.warning(self, "输入错误", "请输入有效初始值")
        else:
            QMessageBox.critical(self, "错误", "串口未打开")

    def send_peakInit_to_serial(self):
        if hasattr(self, 'serial') and self.serial.isOpen():
            try:
                peak_init = float(self.lineEdit_PeakInit.text())
                command = f"SET PEAK_T0 {peak_init}\r\n"

                self.serial.write(command.encode())
                print(f"Send command: {command}")
            except ValueError:
                QMessageBox.warning(self, "输入错误", "请输入有效初始值")
        else:
            QMessageBox.critical(self, "错误", "串口未打开")

    def send_DSA_to_serial(self):
        # 检查串口对象是否存在，并且是否已打开
        if hasattr(self, 'serial') and self.serial.isOpen():
            try:
                # 获取增益值并转换为浮点数
                dsa = float(self.lineEdit_DSA.text())
                command = f"GAIN {dsa}\n"

                # 发送命令到串口
                self.serial.write(command.encode())
                print(f"Send command: {command}")

            except ValueError:
                # 如果输入无效，弹出警告
                QMessageBox.warning(self, "输入错误", "请输入有效增益值0~31.5")
            except Exception as e:
                # 捕获其他串口发送异常，防止程序崩溃
                QMessageBox.critical(self, "错误", f"发送数据失败: {str(e)}")
        else:
            # 如果串口未打开或不存在，弹出错误提示
            QMessageBox.critical(self, "错误", "串口未打开")

    def send_Tor_to_serial(self):
        # 检查串口对象是否存在并已打开
        if hasattr(self, 'serial') and self.serial.isOpen():
            # 获取lineEdit_TorStatus中的文字
            tor_status = self.lineEdit_TorStatus.text().strip()

            # 根据文字内容确定要发送的命令
            if tor_status == "前向":
                command = "TOR 0\r\n"
            elif tor_status == "反向":
                command = "TOR 1\r\n"
            else:
                # 如果文本不符合要求，提示用户
                QMessageBox.warning(self, "输入错误", "Tor状态只能为 '前向' 或 '反向'")
                return

            # 发送命令到串口
            try:
                self.serial.write(command.encode())
                print(f"Sent command: {command}")
            except Exception as e:
                QMessageBox.critical(self, "错误", f"发送数据失败: {str(e)}")
        else:
            # 如果串口未打开或不存在，弹出错误提示
            QMessageBox.critical(self, "错误", "串口未打开")




    # def read_from_serial(self):
    #     # 读取串口返回的数据
    #     while self.serial.canReadLine():
    #         response = self.serial.readLine().data().decode().strip()
    #
    #         # 根据返回的内容判断温度补偿状态并更新标签
    #         if "Temperature compensation disabled" in response:
    #             self.label_ModeStatus.setText("温补模式状态: 已禁用")
    #             QMessageBox.information(self, "信息", "温度补偿模式已禁用")
    #         elif "Temperature compensation enabled" in response:
    #             self.label_ModeStatus.setText("温补模式状态: 已启用")
    #             QMessageBox.information(self, "信息", "温度补偿模式已启用")

    import re

    def read_from_serial(self):
        # 创建一个缓冲区用于保存从串口读取的数据
        buffer = ""

        # 正则表达式模式定义
        patterns = {
            "Temp": re.compile(r"Temp\s*=\s*([+-]?\d+\.\d{2})"),
            "disable_temp_comp": re.compile(r"Temperature compensation disabled"),
            "enable_temp_comp": re.compile(r"Temperature compensation enabled"),
            "vgs_driver": re.compile(r"Adjust_Vgs_Driver:\s+Vgs_Driver\s*=\s*([+-]?\d+\.\d{4}),\s*T\s*=\s*([+-]?\d+\.\d{2})"),
            "vgs_main": re.compile(r"Adjust_Vgs_Main:\s+Vgs_Main\s*=\s*([+-]?\d+\.\d{4}),\s*T\s*=\s*([+-]?\d+\.\d{2})"),
            "vgs_peak": re.compile(r"Adjust_Vgs_Peak:\s+Vgs_Peak\s*=\s*([+-]?\d+\.\d{4}),\s*T\s*=\s*([+-]?\d+\.\d{2})"),
            "forward": re.compile(r"Direction: Forwards"),
            "backward": re.compile(r"Direction: Backwards")

        }
        # 读取串口返回的数据
        while self.serial.canReadLine():
            # 每次读取一行并去除多余的空格和换行符
            response = self.serial.readLine().data().decode().strip()

            # 打印调试信息
            print("Received from serial:", response)

            # 使用正则表达式进行匹配和解析
            if patterns["disable_temp_comp"].search(response):
                self.label_ModeStatus.setText("直设栅压模式")
                QMessageBox.information(self, "信息", "温度补偿模式已禁用")
                self.update_button_status()

            elif patterns["enable_temp_comp"].search(response):
                self.label_ModeStatus.setText("温补模式")
                QMessageBox.information(self, "信息", "温度补偿模式已启用")
                self.update_button_status()

            elif patterns["forward"].search(response):
                self.lineEdit_TorStatus.setText("前向")

            elif patterns["backward"].search(response):
                self.lineEdit_TorStatus.setText("反向")

            else:
                match_temp = patterns["Temp"].search(response)
                if match_temp:
                    temp_value = match_temp.group(1)
                    self.lcdNumber_Temp.display(temp_value)

                # 检查是否匹配到 Adjust_Vgs_Driver 信息
                match_driver = patterns["vgs_driver"].search(response)
                if match_driver:
                    driver_value = match_driver.group(1)
                    # Temp = match_driver.group(2)
                    self.line_DriverCurrent.setText(driver_value)
                    # self.lcdNumber_Temp.display(Temp)

                # 检查是否匹配到 Adjust_Vgs_Main 信息
                match_main = patterns["vgs_main"].search(response)
                if match_main:
                    main_value = match_main.group(1)
                    self.line_MainCurrent.setText(main_value)

                # 检查是否匹配到 Adjust_Vgs_Peak 信息
                match_peak = patterns["vgs_peak"].search(response)
                if match_peak:
                    peak_value = match_peak.group(1)
                    self.line_PeakCurrent.setText(peak_value)

            # 其他的正则匹配和处理可以继续添加

class MyMainForm(QWidget, Ui_Form):
    def __init__(self):
        super(MyMainForm, self).__init__()
        self.setupUi(self)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MyMainForm()
    main_window.show()
    sys.exit(app.exec_())